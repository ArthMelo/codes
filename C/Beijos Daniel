#include <stdio.h>
#include <stdlib.h>
#include <math.h>

long long mdc(long long a, long long b);

long long expo(long long phi);

long long prime(long long x);

int main()
{
    long long p, q, pp, qq; // p e q primos aleat√≥rios
    long long e;            // expoente publico
    long long phi;          // phi(n) = (p-1)*(q-1)
    long long n;            // n = pq
    long long d;            // chave privada

    pp = rand() % 1000000000;
    qq = rand() % 1000000000; // pegar numeros aleatorios

    p = prime(pp);
    q = prime(qq); // transformar os numeros em primos aleatorios

    n = p * q; // descobrir n

    phi = (p - 1) * (q - 1); // descobrir phi de n

    e = expo(phi); // descobrir expoente publico

    // d*e mod phi == 1

    printf("P primo = %lld\nQ primo = %lld\n", pp, qq);
    printf("N = %lld\n", n);
    printf("Phi(n) = %lld\n", phi);
    printf("E = %lld\n", e);
    return 0;
}

long long mdc(long long a, long long b)
{
    if (b == 0)
    {
        return a;
    }
    else
    {
        return mdc(b, a % b);
    }
}

long long expo(long long phi)
{
    int e = rand() % phi;
    if (mdc(phi, e) == 1)
    {
        return e;
    }
    else
    {
        return expo(phi);
    }
}

long long prime(long long x)
{
    int d, contador = 0;
    for (int i = 1; i < x; i++)
    {

        if (x % i == 0)
        {
            contador++;
        }
    }
    if (contador > 1)
    {
        return prime(x - 1);
    }
    else
    {
        return x;
    }
}
